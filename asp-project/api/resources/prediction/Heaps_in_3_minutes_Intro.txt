[0.26->2.82] Today we're going to learn about heaps.
[3.07->9.22] You often hear the word heap when discussing storage for garbage collection in languages such as Java.
[9.47->14.85] But this video is about the heap data structure that is used to manage information.
[15.10->18.69] Heaps are sometimes called binary heaps.
[19.20->23.04] and are nearly complete binary trees.
[23.55->28.93] Here's an example of a heap. By a nearly complete binary tree.
[29.18->32.26] I mean that all levels are filled except the lowest.
[32.51->33.02] Thank you.
[33.28->38.91] and the lowest level is filled up to a certain point starting from the left.
[39.42->45.57] Uses of heaps include heapsort and priority cues. And there are two kinds of heaps.
[45.82->51.97] Maxheeps and Minheeps. On the left we have a Maxheep.
[52.22->58.37] The condition for a max heap is that the value of the node i is less than 1.
[58.62->62.21] or equal to the value of its parent.
[64.26->68.61] Max Heaps are used for heap sort.
[70.14->76.29] Similarly, for the min heap, the value of the note i is greater than or equal to the value i.
[76.54->77.57] you of its parent.
[78.34->78.85] you
[80.64->83.71] Minheaps are great for priority cues.
[83.97->84.74] Thank you.
[86.78->89.86] Because we said heaps are nearly complete binary trees.
[90.11->94.98] We know that the height of a heap is bigot of log n.
[95.23->99.07] which you'll see in various operations that we'll learn later.
[101.38->107.52] I'd also like to show heaps represented as an array. Here's our max heap.
[107.78->109.82] And here it is as an array.
[112.38->113.15] you
[113.66->116.99] The root of the tree is at index one of the array.
[118.78->119.30] you
[119.55->121.60] To get a note, left child.
[121.86->124.93] you simply take the index times by two.
[126.98->132.61] And to get the notes right child, you take the index times by two and add one.
[134.40->140.54] Finally, to retrieve a node's parent is the floor of the node's index divided by 2.
[140.80->141.31] Thank you.
[143.10->149.25] We choose to put the root at index 1 instead of 0 as it keeps this arithmetic cleaner.
[149.50->153.34] and most computers can do these operations with fewer instructions.
[154.37->156.42] Let's take a look at 15.
[157.44->158.98] which is at index three.
[159.74->162.30] The left child of 15.
[163.07->164.86] is equal to 2 times 3.
[165.89->167.42] which is the sixth index.
[168.19->169.98] and a node value of 12.
[172.54->174.34] The right child of 15 is a child of 15.
[174.59->179.71] is 2 times 3 plus 1, which is the index of 7.
[180.22->182.78] or the node 13.
[184.83->190.98] Lastly, the parent of 15 is the floor of 3 divided by 2.
[191.23->194.05] which is the first index and the root of our tree.
[194.30->195.07] 21.
[198.66->203.01] You know I prefer brevity, so we'll end the video here and in the next one
[203.52->206.85] I'll show you how to create a heap from an unordered array.
[207.10->208.38] Thanks for watching.
